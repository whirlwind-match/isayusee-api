# Database properties - configure the url, username and password in application-local.properties instead.
# Turn off Hibernate DDL since we are using Liquibase
spring.jpa.hibernate.ddl-auto=none

spring.liquibase.enabled=false
# spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml

# Spring Security OAuth2 - This cannot be set as default here as we may want to be able to use jwt.key-value
# environment, so must be set in application-local.properties and as env variables
# SECURITY_OAUTH2_RESOURCE_JWK_KEY-SET-URI where deployed
# security.oauth2.resource.jwk.key-set-uri=https://xx.eu.auth0.com/.well-known/jwks.json
#security.oauth2.resource.jwt.key-uri=https://xx.eu.auth0.com/oauth/token
# NOTE: For above settings copy docs/application-local-example.properties
# to src/main/resources/application-local.properties and populate as needed.
# Then run with Spring profile = local

# This is the clientId or the API key (so far only works for clientId with Auth0 java library)
# security.oauth2.resource.id=xxx
# NOTE: Must set SECURITY_OAUTH_RESOURCE_ID={dev|stable|preview|etc key} as appropriate when deployed


# Show user if we have it
logging.pattern.level=%10user %5p
# logging.level.org.springframework.security=debug

# Example of if we want to allow some users to check /health etc
management.endpoints.web.cors.allowed-origins=http://localhost:3000
management.endpoints.web.cors.allowed-methods=GET
management.endpoints.web.cors.allowed-headers=authorization
